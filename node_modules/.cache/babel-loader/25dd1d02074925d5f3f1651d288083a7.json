{"ast":null,"code":"var _jsxFileName = \"/home/sirjamo/repos/React-Bootcamp/React-Note-App/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [notes, setNotes] = React.useState(() => JSON.parse(localStorage.getItem(\"notes\")) || []);\n  const [currentNoteId, setCurrentNoteId] = React.useState(notes[0] && notes[0].id || \"\");\n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes)); //console.log(notes[0].body.split(\"\"));\n  }, [notes]);\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\"\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  function updateNote(text) {\n    setNotes(oldNotes => {\n      const newOldNotes = [];\n\n      for (let i = 0; i < oldNotes.length; i++) {\n        // oldnote at positiion [i] doesn't match cureently editing\n        if (oldNotes[i].id == currentNoteId) {\n          //unshift oldnote at positiion [i] (+plus chnages) to the start\n          newOldNotes.unshift({ ...oldNotes[i],\n            body: text\n          });\n        } else {\n          // if it doesn't  match return it at the same position [i]\n          newOldNotes.push(oldNotes[i]);\n        }\n      }\n\n      return newOldNotes;\n    });\n  }\n  /**\n   * Challenge: complete and implement the deleteNote function\n   *\n   * Hints:\n   * 1. What array method can be used to return a new\n   *    array that has filtered out an item based\n   *    on a condition?\n   * 2. Notice the parameters being based to the function\n   *    and think about how both of those parameters\n   *    can be passed in during the onClick event handler\n   */\n\n\n  function deleteNote(event, noteId) {\n    event.stopPropagation();\n    newNoteStatus;\n\n    if (noteId == currentNoteId) {\n      return curren;\n      console.log(noteId);\n    }\n  }\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId;\n    }) || notes[0];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(Split, {\n      sizes: [30, 70],\n      direction: \"horizontal\",\n      className: \"split\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        currentNote: findCurrentNote(),\n        setCurrentNoteId: setCurrentNoteId,\n        newNote: createNewNote,\n        deleteNote: deleteNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), currentNoteId && notes.length > 0 && /*#__PURE__*/_jsxDEV(Editor, {\n        currentNote: findCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-notes\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You have no notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first-note\",\n        onClick: createNewNote,\n        children: \"Create one now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"h9rVnagE36yNkFkROwCMD8XJBck=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Sidebar","Editor","data","Split","nanoid","App","notes","setNotes","useState","JSON","parse","localStorage","getItem","currentNoteId","setCurrentNoteId","id","useEffect","setItem","stringify","createNewNote","newNote","body","prevNotes","updateNote","text","oldNotes","newOldNotes","i","length","unshift","push","deleteNote","event","noteId","stopPropagation","newNoteStatus","curren","console","log","findCurrentNote","find","note"],"sources":["/home/sirjamo/repos/React-Bootcamp/React-Note-App/src/App.js"],"sourcesContent":["import React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport { data } from \"./data\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\n\nexport default function App() {\n\n  const [notes, setNotes] = React.useState(\n    () => JSON.parse(localStorage.getItem(\"notes\")) || []\n  );\n  const [currentNoteId, setCurrentNoteId] = React.useState(\n    (notes[0] && notes[0].id) || \"\"\n  );\n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n    //console.log(notes[0].body.split(\"\"));\n  }, [notes]);\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\",\n    };\n\n    setNotes((prevNotes) => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  function updateNote(text) {\n    setNotes((oldNotes) => {\n      const newOldNotes = [];\n      for (let i = 0; i < oldNotes.length; i++) {\n        // oldnote at positiion [i] doesn't match cureently editing\n        if (oldNotes[i].id == currentNoteId) {\n          //unshift oldnote at positiion [i] (+plus chnages) to the start\n          newOldNotes.unshift({ ...oldNotes[i], body: text });\n        } else {\n          // if it doesn't  match return it at the same position [i]\n          newOldNotes.push(oldNotes[i]);\n        }\n      }\n      return newOldNotes;\n    });\n  }\n\n  /**\n   * Challenge: complete and implement the deleteNote function\n   *\n   * Hints:\n   * 1. What array method can be used to return a new\n   *    array that has filtered out an item based\n   *    on a condition?\n   * 2. Notice the parameters being based to the function\n   *    and think about how both of those parameters\n   *    can be passed in during the onClick event handler\n   */\n  function deleteNote(event, noteId) {\n    event.stopPropagation();\n    newNoteStatus\n    if (noteId == currentNoteId){\n    return (curren)\n    console.log(noteId)\n  }}\n\n  function findCurrentNote() {\n    return (\n      notes.find((note) => {\n        return note.id === currentNoteId;\n      }) || notes[0]\n    );\n  }\n\n  return (\n    <main>\n      {notes.length > 0 ? (\n        <Split sizes={[30, 70]} direction=\"horizontal\" className=\"split\">\n          <Sidebar\n            notes={notes}\n            currentNote={findCurrentNote()}\n            setCurrentNoteId={setCurrentNoteId}\n            newNote={createNewNote}\n            deleteNote={deleteNote}\n          />\n          {currentNoteId && notes.length > 0 && (\n            <Editor currentNote={findCurrentNote()} updateNote={updateNote} />\n          )}\n        </Split>\n      ) : (\n        <div className=\"no-notes\">\n          <h1>You have no notes</h1>\n          <button className=\"first-note\" onClick={createNewNote}>\n            Create one now\n          </button>\n        </div>\n      )}\n    </main>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}